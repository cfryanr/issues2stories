#@ load("@ytt:data", "data")
---
apiVersion: v1
kind: Namespace
metadata:
  name: issues2stories
  labels:
    app: issues2stories
---
apiVersion: v1
kind: Secret
metadata:
  name: issues2stories-api-tokens
  namespace: issues2stories
  labels:
    app: issues2stories
type: Opaque
stringData:
  tracker: #@ data.values.tracker_token
  github: #@ data.values.github_token
---
apiVersion: v1
kind: Secret
metadata:
  name: issues2stories-basic-auth
  namespace: issues2stories
  labels:
    app: issues2stories
type: kubernetes.io/basic-auth
stringData:
  username: #@ data.values.basic_auth_username
  password: #@ data.values.basic_auth_password
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: issues2stories-configmap
  namespace: issues2stories
  labels:
    app: issues2stories
data:
  #@yaml/text-templated-strings
  config.yaml: |
    tracker_id_to_github_username_mapping: (@= data.values.tracker_id_to_github_username_mapping or "null" @)
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: issues2stories
  namespace: issues2stories
  labels:
    app: issues2stories
spec:
  replicas: 2
  selector:
    matchLabels:
      app: issues2stories
  template:
    metadata:
      labels:
        app: issues2stories
    spec:
      containers:
        - name: issues2stories
          image: #@ data.values.container_image
          imagePullPolicy: Always
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
          env:
            - name: GITHUB_ORG
              value: #@ data.values.github_org
            - name: GITHUB_REPO
              value: #@ data.values.github_repo
            - name: TRACKER_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: issues2stories-api-tokens
                  key: tracker
            - name: GITHUB_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: issues2stories-api-tokens
                  key: github
            - name: BASIC_AUTH_USERNAME
              valueFrom:
                secretKeyRef:
                  name: issues2stories-basic-auth
                  key: username
            - name: BASIC_AUTH_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: issues2stories-basic-auth
                  key: password
      volumes:
        - name: config-volume
          configMap:
            name: issues2stories-configmap
---
apiVersion: v1
kind: Service
metadata:
  name: issues2stories
  namespace: issues2stories
  labels:
    app: issues2stories
spec:
  type: NodePort
  selector:
    app: issues2stories
  ports:
    - protocol: TCP
      port: 60000
      targetPort: 8080
---
#! Create a Google-managed TLS cert for the app, which will be associated with the ingress below
apiVersion: networking.gke.io/v1beta2 #! note that this may need to use v1 on newer GKE clusters
kind: ManagedCertificate
metadata:
  name: issues2stories
  namespace: issues2stories
  labels:
    app: issues2stories
spec:
  domains:
    - #@ data.values.domain_name
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: issues2stories
  namespace: issues2stories
  labels:
    app: issues2stories
  annotations:
    kubernetes.io/ingress.class: gce #! External load balancer
    kubernetes.io/ingress.allow-http: "false" #! Turn off http. Must be the string "false" (not the boolean).
    networking.gke.io/managed-certificates: issues2stories #! Name of ManagedCertificate above.
    #! Static IP must defined in advance here: https://console.cloud.google.com/networking/addresses/list
    kubernetes.io/ingress.global-static-ip-name: #@ data.values.ingress_global_static_ip_name
spec:
  defaultBackend:
    service:
      name: issues2stories
      port:
        number: 60000
