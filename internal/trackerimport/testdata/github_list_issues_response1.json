[
  {
    "url": "https://api.github.com/repos/vmware-tanzu/pinniped/issues/371",
    "repository_url": "https://api.github.com/repos/vmware-tanzu/pinniped",
    "labels_url": "https://api.github.com/repos/vmware-tanzu/pinniped/issues/371/labels{/name}",
    "comments_url": "https://api.github.com/repos/vmware-tanzu/pinniped/issues/371/comments",
    "events_url": "https://api.github.com/repos/vmware-tanzu/pinniped/issues/371/events",
    "html_url": "https://github.com/vmware-tanzu/pinniped/issues/371",
    "id": 796114199,
    "node_id": "MDU6SXNzdWU3OTYxMTQxOTk=",
    "number": 371,
    "title": "Do we need to remove `TokenCredentialRequest` from `pinniped` category?",
    "user": {
      "login": "ankeesler",
      "id": 3081590,
      "node_id": "MDQ6VXNlcjMwODE1OTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3081590?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ankeesler",
      "html_url": "https://github.com/ankeesler",
      "followers_url": "https://api.github.com/users/ankeesler/followers",
      "following_url": "https://api.github.com/users/ankeesler/following{/other_user}",
      "gists_url": "https://api.github.com/users/ankeesler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ankeesler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ankeesler/subscriptions",
      "organizations_url": "https://api.github.com/users/ankeesler/orgs",
      "repos_url": "https://api.github.com/users/ankeesler/repos",
      "events_url": "https://api.github.com/users/ankeesler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ankeesler/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2177578152,
        "node_id": "MDU6TGFiZWwyMTc3NTc4MTUy",
        "url": "https://api.github.com/repos/vmware-tanzu/pinniped/labels/bug",
        "name": "bug",
        "color": "d73a4a",
        "default": true,
        "description": "Something isn't working"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2021-01-28T15:35:00Z",
    "updated_at": "2021-01-28T15:38:10Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "<!--\r\n\r\nHey! Thanks for opening an issue!\r\n\r\nIMPORTANT: If you believe this bug is a security issue, please don't use this template and follow our [security guidelines](/doc/security.md).\r\n\r\nIt is recommended that you include screenshots and logs to help everyone achieve a shared understanding of the bug.\r\n\r\n-->\r\n\r\n**What happened?**\r\n\r\n- I am running the Concierge with a `JWTAuthenticator` in the `pinniped-concierge` namespace.\r\n- I ran `kubectl get pinniped` and got this:\r\n```\r\nakeesler@akeesler-a02:pinniped-ci$ k get pinniped\r\nError from server (MethodNotAllowed): the server does not allow this method on the requested resource\r\n```\r\n- I ran `kubectl get pinniped -n pinniped-concierge` and got this:\r\n```\r\nakeesler@akeesler-a02:pinniped-ci$ k get pinniped -n pinniped-concierge\r\nNAME                                                                           ISSUER\r\njwtauthenticator.authentication.concierge.pinniped.dev/tkg-jwt-authenticator   https://af0c3cd46a7c2415c835317675239b96-1968935863.us-east-1.elb.amazonaws.com\r\n\r\nNAME                                                                       AGE\r\ncredentialissuer.config.concierge.pinniped.dev/pinniped-concierge-config   14m\r\nError from server (MethodNotAllowed): the server does not allow this method on the requested resource\r\n```\r\n- I ran `kubectl get pinniped -A` and got this:\r\n```\r\nakeesler@akeesler-a02:pinniped-ci$ k get pinniped -A\r\nNAMESPACE            NAME                                                                           ISSUER\r\npinniped-concierge   jwtauthenticator.authentication.concierge.pinniped.dev/tkg-jwt-authenticator   https://af0c3cd46a7c2415c835317675239b96-1968935863.us-east-1.elb.amazonaws.com\r\n\r\nNAMESPACE            NAME                                                                       AGE\r\npinniped-concierge   credentialissuer.config.concierge.pinniped.dev/pinniped-concierge-config   15m\r\nError from server (NotFound): Unable to list \"login.concierge.pinniped.dev/v1alpha1, Resource=tokencredentialrequests\": the server could not find the requested resource\r\n```\r\n\r\n**What did you expect to happen?**\r\n\r\n- I don't want to see those `Error`'s show up when I `get` the `pinniped` categories\r\n\r\n**What is the simplest way to reproduce this behavior?**\r\n\r\n- `cd` into the `pinniped` repo\r\n- `./hack/prepare-for-integration-tests.sh`\r\n- Do this:\r\n```\r\ncat <<EOF | kubectl apply -f -\r\nkind: JWTAuthenticator\r\napiVersion: authentication.concierge.pinniped.dev/v1alpha1\r\nmetadata:\r\n  name: whatever\r\n  namespace: concierge\r\nspec:\r\n  issuer: https://whatever.tld\r\n  audience: whatever\r\nEOF\r\n```\r\n- `kubectl get pinniped -A` (you should see an `Error`)\r\n- `kubectl get pinniped -n concierge` (you should see an `Error`)\r\n- `kubectl get pinniped` (you should see an `Error`)\r\n\r\n**In what environment did you see this bug?**\r\n- Pinniped server version: `v0.4.1`\r\n- Pinniped client version: N/A\r\n- Pinniped container image (if using a public container image): `v0.4.1`\r\n- Pinniped configuration (what IDP(s) are you using? what downstream credential minting mechanisms are you using?): `v0.4.1`\r\n- Kubernetes version (use `kubectl version`): `0.20.1`\r\n- Kubernetes installer & version (e.g., `kubeadm version`): N/A\r\n- Cloud provider or hardware configuration: `kind` (`docker`)\r\n- OS (e.g: `cat /etc/os-release`): macOS\r\n- Kernel (e.g. `uname -a`): macOS\r\n- Others:\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vmware-tanzu/pinniped/issues/368",
    "repository_url": "https://api.github.com/repos/vmware-tanzu/pinniped",
    "labels_url": "https://api.github.com/repos/vmware-tanzu/pinniped/issues/368/labels{/name}",
    "comments_url": "https://api.github.com/repos/vmware-tanzu/pinniped/issues/368/comments",
    "events_url": "https://api.github.com/repos/vmware-tanzu/pinniped/issues/368/events",
    "html_url": "https://github.com/vmware-tanzu/pinniped/issues/368",
    "id": 795474614,
    "node_id": "MDU6SXNzdWU3OTU0NzQ2MTQ=",
    "number": 368,
    "title": "Add concierge impersonation proxy support to `pinniped get kubeconfig` CLI command.",
    "user": {
      "login": "mattmoyer",
      "id": 3210334,
      "node_id": "MDQ6VXNlcjMyMTAzMzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3210334?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattmoyer",
      "html_url": "https://github.com/mattmoyer",
      "followers_url": "https://api.github.com/users/mattmoyer/followers",
      "following_url": "https://api.github.com/users/mattmoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattmoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattmoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattmoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/mattmoyer/orgs",
      "repos_url": "https://api.github.com/users/mattmoyer/repos",
      "events_url": "https://api.github.com/users/mattmoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattmoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2177578155,
        "node_id": "MDU6TGFiZWwyMTc3NTc4MTU1",
        "url": "https://api.github.com/repos/vmware-tanzu/pinniped/labels/enhancement",
        "name": "enhancement",
        "color": "a2eeef",
        "default": true,
        "description": "New feature or request"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": {
      "url": "https://api.github.com/repos/vmware-tanzu/pinniped/milestones/2",
      "html_url": "https://github.com/vmware-tanzu/pinniped/milestone/2",
      "labels_url": "https://api.github.com/repos/vmware-tanzu/pinniped/milestones/2/labels",
      "id": 6298345,
      "node_id": "MDk6TWlsZXN0b25lNjI5ODM0NQ==",
      "number": 2,
      "title": "v0.6.0",
      "description": "Release focus: make Pinniped work on all types of clusters, including managed environments.",
      "creator": {
        "login": "danjahner",
        "id": 17714098,
        "node_id": "MDQ6VXNlcjE3NzE0MDk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/17714098?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/danjahner",
        "html_url": "https://github.com/danjahner",
        "followers_url": "https://api.github.com/users/danjahner/followers",
        "following_url": "https://api.github.com/users/danjahner/following{/other_user}",
        "gists_url": "https://api.github.com/users/danjahner/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/danjahner/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/danjahner/subscriptions",
        "organizations_url": "https://api.github.com/users/danjahner/orgs",
        "repos_url": "https://api.github.com/users/danjahner/repos",
        "events_url": "https://api.github.com/users/danjahner/events{/privacy}",
        "received_events_url": "https://api.github.com/users/danjahner/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 5,
      "closed_issues": 0,
      "state": "open",
      "created_at": "2021-01-11T18:44:25Z",
      "updated_at": "2021-01-27T21:53:02Z",
      "due_on": "2021-02-12T08:00:00Z",
      "closed_at": null
    },
    "comments": 0,
    "created_at": "2021-01-27T21:53:02Z",
    "updated_at": "2021-01-27T21:53:02Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "### Acceptance Criteria\r\n\r\n```gherkin\r\nScenario: use concierge via the `pinniped get kubeconfig` CLI subcommand.\r\n  Given that I have an managed cluster with the Pinniped concierge installed\r\n    And that I have configured the impersonation proxy appropriately\r\n  When I run `pinniped get kubeconfig`\r\n  Then I can use that kubeconfig to run kubectl commands as my user\r\n```\r\n\r\n### Notes\r\nThis is a followup to #339, #363, #364, and #366. It covers the `pinniped get kubeconfig` subcommand and builds on the previous changes to the `pinniped login` subcommands.\r\n\r\n### CLI Changes\r\n\r\nThere are a few new flags to be added to the `pinniped get kubeconfig ` command:\r\n\r\n1. `--concierge-endpoint` (specifies the endpoint URL of the concierge impersonation proxy).\r\n\r\n2. `--concierge-ca-bundle` (specifies the CA bundle for talking to the concierge).\r\n\r\n3. `--concierge-use-impersonation-proxy` (species that the concierge should be used in impersonation proxy mode).\r\n\r\nEach of these flags can also be defaulted based on the CredentialIssuer found in the target cluster:\r\n\r\n- The `--concierge-use-impersonation-proxy` flag should be set based on the currently successful strategies found in the CredentialIssuer status. If the `KubeClusterSigningCertificate` strategy is failing (as it will on managed cluster environments), then the `--concierge-use-impersonation-proxy` should be defaulted to \"true\".\r\n\r\n- The `--concierge-ca-bundle` and `--concierge-ca-bundle`  flags should default to the corresponding `status.impersonationProxy` fields added in #364.\r\n\r\nWhen the  `--concierge-use-impersonation-proxy` flag is set to true (explicitly or via auto defaulting), then the generated kubeconfig will have some important changes:\r\n\r\n- The `clusters[].cluster.server` and `clusters[].cluster.certificate-authority-data` fields should be set to point at the impersonation proxy.\r\n- The `--enable-concierge-impersonation-proxy` flag (from #366) should be set to true.\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vmware-tanzu/pinniped/issues/355",
    "repository_url": "https://api.github.com/repos/vmware-tanzu/pinniped",
    "labels_url": "https://api.github.com/repos/vmware-tanzu/pinniped/issues/355/labels{/name}",
    "comments_url": "https://api.github.com/repos/vmware-tanzu/pinniped/issues/355/comments",
    "events_url": "https://api.github.com/repos/vmware-tanzu/pinniped/issues/355/events",
    "html_url": "https://github.com/vmware-tanzu/pinniped/pull/355",
    "id": 792162917,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NTYwMDkyNDA1",
    "number": 355,
    "title": "Add initial minimal impersonation proxy.",
    "user": {
      "login": "mattmoyer",
      "id": 3210334,
      "node_id": "MDQ6VXNlcjMyMTAzMzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3210334?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattmoyer",
      "html_url": "https://github.com/mattmoyer",
      "followers_url": "https://api.github.com/users/mattmoyer/followers",
      "following_url": "https://api.github.com/users/mattmoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattmoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattmoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattmoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/mattmoyer/orgs",
      "repos_url": "https://api.github.com/users/mattmoyer/repos",
      "events_url": "https://api.github.com/users/mattmoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattmoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2368533571,
        "node_id": "MDU6TGFiZWwyMzY4NTMzNTcx",
        "url": "https://api.github.com/repos/vmware-tanzu/pinniped/labels/cla-not-required",
        "name": "cla-not-required",
        "color": "159818",
        "default": false,
        "description": null
      },
      {
        "id": 2177578155,
        "node_id": "MDU6TGFiZWwyMTc3NTc4MTU1",
        "url": "https://api.github.com/repos/vmware-tanzu/pinniped/labels/enhancement",
        "name": "enhancement",
        "color": "a2eeef",
        "default": true,
        "description": "New feature or request"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "mattmoyer",
      "id": 3210334,
      "node_id": "MDQ6VXNlcjMyMTAzMzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3210334?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattmoyer",
      "html_url": "https://github.com/mattmoyer",
      "followers_url": "https://api.github.com/users/mattmoyer/followers",
      "following_url": "https://api.github.com/users/mattmoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattmoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattmoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattmoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/mattmoyer/orgs",
      "repos_url": "https://api.github.com/users/mattmoyer/repos",
      "events_url": "https://api.github.com/users/mattmoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattmoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "mattmoyer",
        "id": 3210334,
        "node_id": "MDQ6VXNlcjMyMTAzMzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3210334?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mattmoyer",
        "html_url": "https://github.com/mattmoyer",
        "followers_url": "https://api.github.com/users/mattmoyer/followers",
        "following_url": "https://api.github.com/users/mattmoyer/following{/other_user}",
        "gists_url": "https://api.github.com/users/mattmoyer/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mattmoyer/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mattmoyer/subscriptions",
        "organizations_url": "https://api.github.com/users/mattmoyer/orgs",
        "repos_url": "https://api.github.com/users/mattmoyer/repos",
        "events_url": "https://api.github.com/users/mattmoyer/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mattmoyer/received_events",
        "type": "User",
        "site_admin": false
      },
      {
        "login": "margocrawf",
        "id": 8249360,
        "node_id": "MDQ6VXNlcjgyNDkzNjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8249360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/margocrawf",
        "html_url": "https://github.com/margocrawf",
        "followers_url": "https://api.github.com/users/margocrawf/followers",
        "following_url": "https://api.github.com/users/margocrawf/following{/other_user}",
        "gists_url": "https://api.github.com/users/margocrawf/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/margocrawf/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/margocrawf/subscriptions",
        "organizations_url": "https://api.github.com/users/margocrawf/orgs",
        "repos_url": "https://api.github.com/users/margocrawf/repos",
        "events_url": "https://api.github.com/users/margocrawf/events{/privacy}",
        "received_events_url": "https://api.github.com/users/margocrawf/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2021-01-22T17:00:26Z",
    "updated_at": "2021-01-30T00:39:15Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/vmware-tanzu/pinniped/pulls/355",
      "html_url": "https://github.com/vmware-tanzu/pinniped/pull/355",
      "diff_url": "https://github.com/vmware-tanzu/pinniped/pull/355.diff",
      "patch_url": "https://github.com/vmware-tanzu/pinniped/pull/355.patch"
    },
    "body": "Adds an initial minimal implementation of an impersonation proxy, which will be an alternative backend for the concierge. It will (once finished) add support for most managed Kubernetes cluster environments.\r\n\r\nFixes #355 \r\n\r\n**Release note**:\r\nNo release note yet because this functionality isn't really exposed in a usable way (it's listening on a port, but you can only use it with a large amount of manual setup).\r\n\r\n```release-note\r\nNONE\r\n```\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vmware-tanzu/pinniped/issues/228",
    "repository_url": "https://api.github.com/repos/vmware-tanzu/pinniped",
    "labels_url": "https://api.github.com/repos/vmware-tanzu/pinniped/issues/228/labels{/name}",
    "comments_url": "https://api.github.com/repos/vmware-tanzu/pinniped/issues/228/comments",
    "events_url": "https://api.github.com/repos/vmware-tanzu/pinniped/issues/228/events",
    "html_url": "https://github.com/vmware-tanzu/pinniped/issues/228",
    "id": 746001254,
    "node_id": "MDU6SXNzdWU3NDYwMDEyNTQ=",
    "number": 228,
    "title": "The `TestSupervisorLogin` integration test can be flaky.",
    "user": {
      "login": "mattmoyer",
      "id": 3210334,
      "node_id": "MDQ6VXNlcjMyMTAzMzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3210334?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattmoyer",
      "html_url": "https://github.com/mattmoyer",
      "followers_url": "https://api.github.com/users/mattmoyer/followers",
      "following_url": "https://api.github.com/users/mattmoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattmoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattmoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattmoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/mattmoyer/orgs",
      "repos_url": "https://api.github.com/users/mattmoyer/repos",
      "events_url": "https://api.github.com/users/mattmoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattmoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2177578156,
        "node_id": "MDU6TGFiZWwyMTc3NTc4MTU2",
        "url": "https://api.github.com/repos/vmware-tanzu/pinniped/labels/good%20first%20issue",
        "name": "good first issue",
        "color": "7057ff",
        "default": true,
        "description": "Good for newcomers"
      },
      {
        "id": 2516426317,
        "node_id": "MDU6TGFiZWwyNTE2NDI2MzE3",
        "url": "https://api.github.com/repos/vmware-tanzu/pinniped/labels/test-flake",
        "name": "test-flake",
        "color": "e99695",
        "default": false,
        "description": "A test is failing in a nondeterministic way."
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-11-18T21:03:44Z",
    "updated_at": "2020-11-18T21:03:44Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**What happened?**\r\n\r\nThe `TestSupervisorLogin` test failed on [a PR CI test run](https://hush-house.pivotal.io/builds/9006057):\r\n\r\n```\r\n=== RUN   TestSupervisorLogin\r\n    supervisor_login_test.go:41: created test OIDCProvider supervisor/test-oidc-provider-zrtnr\r\n    supervisor_login_test.go:79: created test client credentials Secret test-client-creds-fthnc\r\n    supervisor_login_test.go:82: created test UpstreamOIDCProvider test-upstream-v7p7j\r\n    supervisor_login_test.go:92: \r\n        \tError Trace:\tsupervisor_login_test.go:92\r\n        \tError:      \tNot equal: \r\n        \t            \texpected: 302\r\n        \t            \tactual  : 422\r\n        \tTest:       \tTestSupervisorLogin\r\n    supervisor_login_test.go:41: cleaning up test OIDCProvider supervisor/test-oidc-provider-zrtnr\r\n--- FAIL: TestSupervisorLogin (1.96s)\r\n```\r\n\r\n**What did you expect to happen?**\r\n\r\nThe test should succeed!\r\n\r\n**What is the simplest way to reproduce this behavior?**\r\n\r\nI think we should be able to reliably reproduce this flake if we add an artificial delay to the `upstream-observer` controller sync method.\r\n\r\n**In what environment did you see this bug?**\r\n\r\nThis occurred on the PR tests for commit ad1bc6c36cbdfdbe9ec19a3da3394f185a095051.\r\n\r\n**What else is there to know about this bug?**\r\n\r\nWe can probably fix this by adding the appropriate `require.Eventually(...)` call to the assertion block that's failing.\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vmware-tanzu/pinniped/issues/348",
    "repository_url": "https://api.github.com/repos/vmware-tanzu/pinniped",
    "labels_url": "https://api.github.com/repos/vmware-tanzu/pinniped/issues/348/labels{/name}",
    "comments_url": "https://api.github.com/repos/vmware-tanzu/pinniped/issues/348/comments",
    "events_url": "https://api.github.com/repos/vmware-tanzu/pinniped/issues/348/events",
    "html_url": "https://github.com/vmware-tanzu/pinniped/issues/348",
    "id": 791299674,
    "node_id": "MDU6SXNzdWU3OTEyOTk2NzQ=",
    "number": 348,
    "title": "Enable audit logging for all of our test environments",
    "user": {
      "login": "ankeesler",
      "id": 3081590,
      "node_id": "MDQ6VXNlcjMwODE1OTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3081590?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ankeesler",
      "html_url": "https://github.com/ankeesler",
      "followers_url": "https://api.github.com/users/ankeesler/followers",
      "following_url": "https://api.github.com/users/ankeesler/following{/other_user}",
      "gists_url": "https://api.github.com/users/ankeesler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ankeesler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ankeesler/subscriptions",
      "organizations_url": "https://api.github.com/users/ankeesler/orgs",
      "repos_url": "https://api.github.com/users/ankeesler/repos",
      "events_url": "https://api.github.com/users/ankeesler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ankeesler/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2021-01-21T16:28:56Z",
    "updated_at": "2021-01-21T16:28:56Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "<!--\r\n\r\nHey! Thanks for opening an issue!\r\n\r\nIt is recommended that you include screenshots and logs to help everyone achieve a shared understanding of the improvement.\r\n\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nA clear and concise description of what the problem is. Ex. I'm always frustrated when [...]\r\n\r\n- @enj and I were debugging a mysteriously deleted `Secret`, and we had a really hard time figuring out why it was getting deleted.\r\n- We enabled audit logging, and immediately discovered what entity was deleting the `Secret` and we were able to figure out our bug.\r\n- More generally: it would be helpful when debugging test environments to have an audit log to help us understand what is going on.\r\n\r\n**Describe the solution you'd like**\r\nA clear and concise description of what you want to happen.\r\n\r\n- Enable `kube-apiserver` audit logs in our test environments (i.e., our test kind clusters).\r\n- We can write this audit log to a file inside of the kind docker container.\r\n\r\n**Describe alternatives you've considered**\r\n\r\n- None.\r\n\r\n**Are you considering submitting a PR for this feature?**\r\n\r\n- **How will this project improvement be tested?**\r\n- Manually checking that audit logs are being populated after this fix goes in.\r\n- **How does this change the current architecture?**\r\n- It doesn't change our source code architecture, as it is a test change.\r\n- It will fill up our kind cluster disks more quickly, but these disks are ephemeral as they are inside of the kind container.\r\n- **How will this change be backwards compatible?**\r\n- Yes - this is a purely additive test change.\r\n- **How will this feature be documented?**\r\n- Perhaps we should have some sort of \"how to debug test PR test failures\" section in our `CONTRIBUTING.md`?\r\n\r\n**Additional context**\r\nHere is what @enj and I did to enable audit logs in one of our kind clusters.\r\n1. SSH into the VM on which our test kind cluster was running.\r\n2. Exec into the kind container.\r\n3. `cd /etc/kubernetes`\r\n4. Create an `audit-policy.yaml` file, something like the below.\r\n```yaml\r\napiVersion: audit.k8s.io/v1beta1\r\nkind: Policy\r\nmetadata:\r\n  name: Default\r\n# Don't generate audit events for all requests in RequestReceived stage.\r\nomitStages:\r\n- \"RequestReceived\"\r\nrules:\r\n# Don't log requests for events\r\n- level: None\r\n  resources:\r\n  - group: \"\"\r\n    resources: [\"events\"]\r\n# Don't log authenticated requests to certain non-resource URL paths.\r\n- level: None\r\n  userGroups: [\"system:authenticated\", \"system:unauthenticated\"]\r\n  nonResourceURLs:\r\n  - \"/api*\" # Wildcard matching.\r\n  - \"/version\"\r\n  - \"/healthz\"\r\n  - \"/readyz\"\r\n# A catch-all rule to log all other requests at the Metadata level.\r\n- level: Metadata\r\n  # Long-running requests like watches that fall under this rule will not\r\n  # generate an audit event in RequestReceived.\r\n  omitStages:\r\n  - \"RequestReceived\"\r\n```\r\n5. Add the `--audit-policy-file=/etc/kubernetes/audit-policy.yaml` flag to the `manifests/kube-apiserver.yaml` `command` array (surely there is a way in `kind` to do this).\r\n6. Add the `--audit-log-path=/var/log/kube-audit.log` flag to the `manifests/kube-apiserver.yaml` `command` array (surely there is a way in `kind` to do this).\r\n7. Add `volumeMounts` and `volumes` for those files (surely there is a way in `kind` to do this).\r\n```yaml\r\n   volumeMounts:\r\n    - mountPath: /var/log\r\n      name: log\r\n    - mountPath: /etc/kubernetes/audit-policy.yaml\r\n      name: audit\r\n      readOnly: true\r\n...\r\n\r\n  volumes:\r\n  - hostPath:\r\n      path: /var/log\r\n      type: DirectoryOrCreate\r\n    name: log\r\n  - hostPath:\r\n      path: /etc/kubernetes/audit-policy.yaml\r\n      type: File\r\n    name: audit\r\n```",
    "performed_via_github_app": null
  }
]
